const form = document.getElementById("chat-form");
const input = document.getElementById("user-input");
const messages = document.getElementById("messages");

let stage = "collecting_info";
let currentQuestionIndex = 0;
let studentProfile = {};
const questions = [
  { key: "name", question: "üëã Xin ch√†o! B·∫°n t√™n l√† g√¨?" },
  { key: "age", question: "üìÖ B·∫°n bao nhi√™u tu·ªïi?" },
  { key: "major", question: "üìö Ng√†nh h·ªçc hi·ªán t·∫°i c·ªßa b·∫°n l√† g√¨?" },
  { key: "currentYear", question: "üéì B·∫°n ƒëang h·ªçc nƒÉm m·∫•y?" },
  { key: "careerGoal", question: "üéØ M·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n l√† g√¨?" },
  { key: "learningStyle", question: "üìñ Phong c√°ch h·ªçc t·∫≠p b·∫°n th√≠ch l√† g√¨ (t·ª± h·ªçc, nh√≥m, video, ƒë·ªçc s√°ch...)?" },
];

// L·ªãch s·ª≠ h·ªôi tho·∫°i
const chatHistory = [
  {
    role: "system",
    content:
      "B·∫°n l√† m·ªôt c·ªë v·∫•n h·ªçc t·∫≠p h·ªó tr·ª£ sinh vi√™n l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p, ch·ªçn ng√†nh, ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp. B·∫°n kh√¥ng ƒë∆∞·ª£c tr·∫£ l·ªùi b·∫•t k·ª≥ n·ªôi dung n√†o ngo√†i ch·ªß ƒë·ªÅ h·ªçc t·∫≠p. N·∫øu ng∆∞·ªùi d√πng h·ªèi ngo√†i ph·∫°m vi ƒë√≥, b·∫°n ch·ªâ ƒë∆∞·ª£c tr·∫£ l·ªùi: 'T√¥i ch·ªâ h·ªó tr·ª£ t∆∞ v·∫•n h·ªçc t·∫≠p v√† ƒë·ªãnh h∆∞·ªõng ng√†nh h·ªçc.' v√† kh√¥ng n√≥i g√¨ th√™m..",
  },
];

// G·ª≠i form
form.addEventListener("submit", async (e) => {
  e.preventDefault();
  const userMessage = input.value.trim();
  if (!userMessage) return;

  input.value = "";
  addMessage(userMessage, "user");

  if (stage === "collecting_info") {
    const currentKey = questions[currentQuestionIndex].key;
    studentProfile[currentKey] = userMessage;
    currentQuestionIndex++;

    if (currentQuestionIndex < questions.length) {
      setTimeout(() => addMessage(questions[currentQuestionIndex].question, "bot"), 300);
    } else {
      stage = "chatting";
      const introPrompt = generateIntroPrompt(studentProfile);
      chatHistory.push({ role: "user", content: introPrompt });
      await streamMessage();
    }
  } else {
    chatHistory.push({ role: "user", content: userMessage });
    await streamMessage();
  }
});

// Hi·ªÉn th·ªã tin nh·∫Øn
function addMessage(text, sender) {
  const div = document.createElement("div");
  div.className = `message ${sender}`;
  div.textContent = text;
  messages.appendChild(div);
  messages.scrollTop = messages.scrollHeight;
  return div;
}

// Hi·ªÉn th·ªã c√¢u h·ªèi ƒë·∫ßu ti√™n
addMessage(questions[0].question, "bot");

// G·ªçi API GPT
async function streamMessage() {
  const botDiv = addMessage("ƒêang x·ª≠ l√Ω...", "bot");

  try {
    const response = await fetch("/v1/responses", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o",
        input: chatHistory,
      }),
    });

    if (!response.ok) {
      throw new Error(`L·ªói m·∫°ng: ${response.status}`);
    }

    const json = await response.json();
    const output_text = json.output[0].content[0].text;
    botDiv.textContent = output_text;
    chatHistory.push({ role: "assistant", content: output_text });
    messages.scrollTop = messages.scrollHeight;
  } catch (error) {
    botDiv.textContent = "‚ùå L·ªói: " + error.message;
  }
}

// T·∫°o prompt gi·ªõi thi·ªáu sinh vi√™n
function generateIntroPrompt(profile) {
  return (
    `D∆∞·ªõi ƒë√¢y l√† th√¥ng tin c·ªßa sinh vi√™n:\n` +
    `- H·ªç t√™n: ${profile.name}\n` +
    `- Tu·ªïi: ${profile.age}\n` +
    `- Ng√†nh h·ªçc: ${profile.major}\n` +
    `- NƒÉm h·ªçc: ${profile.currentYear}\n` +
    `- M·ª•c ti√™u ngh·ªÅ nghi·ªáp: ${profile.careerGoal}\n` +
    `- Phong c√°ch h·ªçc: ${profile.learningStyle}\n\n` +
    `H√£y ƒë√≥ng vai tr√≤ l√† c·ªë v·∫•n h·ªçc t·∫≠p. T·ª´ c√°c th√¥ng tin tr√™n, h√£y g·ª£i √Ω:\n` +
    `1. Con ƒë∆∞·ªùng h·ªçc t·∫≠p ph√π h·ª£p\n` +
    `2. Nh·ªØng k·ªπ nƒÉng c·∫ßn h·ªçc\n` +
    `3. C√°ch l·∫≠p k·∫ø ho·∫°ch h·ªçc hi·ªáu qu·∫£ theo phong c√°ch c·ªßa sinh vi√™n\n` +
    `Ch·ªâ ph·∫£n h·ªìi c√°c n·ªôi dung trong ph·∫°m vi h·ªçc t·∫≠p.`
  );
}